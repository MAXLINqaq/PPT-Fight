//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""PlayerControls"",
            ""id"": ""f561ed6b-915c-468a-bb99-7440fd9a55e4"",
            ""actions"": [
                {
                    ""name"": ""weaponOne"",
                    ""type"": ""Value"",
                    ""id"": ""5c7e1abd-7b85-4123-a2bf-e29a4afd235e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""weaponTwo"",
                    ""type"": ""Value"",
                    ""id"": ""1d4ebe76-33fb-4cb4-b23b-a95afa860a9c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""faa6468e-c454-49c2-bf54-45dde7ed7062"",
                    ""path"": ""<XInputController>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""weaponOne"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8657381d-3167-4536-a489-1607c342fce0"",
                    ""path"": ""<XInputController>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""weaponTwo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerTwoControls"",
            ""id"": ""1b0a06df-3ef0-498c-96b6-5203fe8a9d08"",
            ""actions"": [
                {
                    ""name"": ""weaponOne"",
                    ""type"": ""Value"",
                    ""id"": ""843319d2-525e-4ce0-a585-bf09e0c23806"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""weaponTwo"",
                    ""type"": ""Value"",
                    ""id"": ""aa90f453-850e-4161-8079-923efc1ac982"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""58d0ae7e-906c-4687-a03e-bcb4889b2366"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""weaponOne"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5a445411-04b8-4568-834d-e60dca55eb9f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""weaponOne"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4f053725-3797-4bd8-b9b5-271cd04bb2f9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""weaponOne"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""db9caa8e-5b8a-432b-aa53-9f3d1d3d12a9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""weaponOne"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""31093ee6-bba9-40b3-9533-a481c487a102"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""weaponOne"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2510265e-346f-4327-8712-a79e758d6dce"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""weaponTwo"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""02fac93b-864e-4e11-9827-ee6df7c4a784"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""weaponTwo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2fe12291-cdd8-4a90-8eae-e9d34e74617a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""weaponTwo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""30158807-1872-4066-bc5f-9aa139fd34f2"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""weaponTwo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""56550694-e65d-448b-8b7e-20a7b3f6bf82"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""weaponTwo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerControls
        m_PlayerControls = asset.FindActionMap("PlayerControls", throwIfNotFound: true);
        m_PlayerControls_weaponOne = m_PlayerControls.FindAction("weaponOne", throwIfNotFound: true);
        m_PlayerControls_weaponTwo = m_PlayerControls.FindAction("weaponTwo", throwIfNotFound: true);
        // PlayerTwoControls
        m_PlayerTwoControls = asset.FindActionMap("PlayerTwoControls", throwIfNotFound: true);
        m_PlayerTwoControls_weaponOne = m_PlayerTwoControls.FindAction("weaponOne", throwIfNotFound: true);
        m_PlayerTwoControls_weaponTwo = m_PlayerTwoControls.FindAction("weaponTwo", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerControls
    private readonly InputActionMap m_PlayerControls;
    private IPlayerControlsActions m_PlayerControlsActionsCallbackInterface;
    private readonly InputAction m_PlayerControls_weaponOne;
    private readonly InputAction m_PlayerControls_weaponTwo;
    public struct PlayerControlsActions
    {
        private @PlayerActions m_Wrapper;
        public PlayerControlsActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @weaponOne => m_Wrapper.m_PlayerControls_weaponOne;
        public InputAction @weaponTwo => m_Wrapper.m_PlayerControls_weaponTwo;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControlsActions instance)
        {
            if (m_Wrapper.m_PlayerControlsActionsCallbackInterface != null)
            {
                @weaponOne.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnWeaponOne;
                @weaponOne.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnWeaponOne;
                @weaponOne.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnWeaponOne;
                @weaponTwo.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnWeaponTwo;
                @weaponTwo.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnWeaponTwo;
                @weaponTwo.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnWeaponTwo;
            }
            m_Wrapper.m_PlayerControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @weaponOne.started += instance.OnWeaponOne;
                @weaponOne.performed += instance.OnWeaponOne;
                @weaponOne.canceled += instance.OnWeaponOne;
                @weaponTwo.started += instance.OnWeaponTwo;
                @weaponTwo.performed += instance.OnWeaponTwo;
                @weaponTwo.canceled += instance.OnWeaponTwo;
            }
        }
    }
    public PlayerControlsActions @PlayerControls => new PlayerControlsActions(this);

    // PlayerTwoControls
    private readonly InputActionMap m_PlayerTwoControls;
    private IPlayerTwoControlsActions m_PlayerTwoControlsActionsCallbackInterface;
    private readonly InputAction m_PlayerTwoControls_weaponOne;
    private readonly InputAction m_PlayerTwoControls_weaponTwo;
    public struct PlayerTwoControlsActions
    {
        private @PlayerActions m_Wrapper;
        public PlayerTwoControlsActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @weaponOne => m_Wrapper.m_PlayerTwoControls_weaponOne;
        public InputAction @weaponTwo => m_Wrapper.m_PlayerTwoControls_weaponTwo;
        public InputActionMap Get() { return m_Wrapper.m_PlayerTwoControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerTwoControlsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerTwoControlsActions instance)
        {
            if (m_Wrapper.m_PlayerTwoControlsActionsCallbackInterface != null)
            {
                @weaponOne.started -= m_Wrapper.m_PlayerTwoControlsActionsCallbackInterface.OnWeaponOne;
                @weaponOne.performed -= m_Wrapper.m_PlayerTwoControlsActionsCallbackInterface.OnWeaponOne;
                @weaponOne.canceled -= m_Wrapper.m_PlayerTwoControlsActionsCallbackInterface.OnWeaponOne;
                @weaponTwo.started -= m_Wrapper.m_PlayerTwoControlsActionsCallbackInterface.OnWeaponTwo;
                @weaponTwo.performed -= m_Wrapper.m_PlayerTwoControlsActionsCallbackInterface.OnWeaponTwo;
                @weaponTwo.canceled -= m_Wrapper.m_PlayerTwoControlsActionsCallbackInterface.OnWeaponTwo;
            }
            m_Wrapper.m_PlayerTwoControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @weaponOne.started += instance.OnWeaponOne;
                @weaponOne.performed += instance.OnWeaponOne;
                @weaponOne.canceled += instance.OnWeaponOne;
                @weaponTwo.started += instance.OnWeaponTwo;
                @weaponTwo.performed += instance.OnWeaponTwo;
                @weaponTwo.canceled += instance.OnWeaponTwo;
            }
        }
    }
    public PlayerTwoControlsActions @PlayerTwoControls => new PlayerTwoControlsActions(this);
    public interface IPlayerControlsActions
    {
        void OnWeaponOne(InputAction.CallbackContext context);
        void OnWeaponTwo(InputAction.CallbackContext context);
    }
    public interface IPlayerTwoControlsActions
    {
        void OnWeaponOne(InputAction.CallbackContext context);
        void OnWeaponTwo(InputAction.CallbackContext context);
    }
}
